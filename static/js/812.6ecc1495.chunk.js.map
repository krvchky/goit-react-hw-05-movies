{"version":3,"file":"static/js/812.6ecc1495.chunk.js","mappings":"wMAGaA,EAAY,SAAC,GAAmB,IAAjBC,EAAgB,EAAhBA,UACpBC,GAAWC,EAAAA,EAAAA,MACjB,OACE,wBACGC,MAAMC,QAAQJ,KAAd,OACCA,QADD,IACCA,OADD,EACCA,EAAWK,KAAI,YAA0B,IAAvBC,EAAsB,EAAtBA,GAAIC,EAAkB,EAAlBA,KAAMC,EAAY,EAAZA,MAC1B,OACE,SAAC,KAAD,CACEC,MAAO,CAAEC,eAAgB,QACzBC,MAAO,CAAEC,KAAMX,GAEfY,GAAE,kBAAaP,GAJjB,UAME,wBAAKC,GAAQC,KAHRF,EAMV,MAGR,C,8ICpBYQ,E,QAAQC,EAAAA,GAAH,+C,uCCuClB,MAlCA,WACE,OAA4BC,EAAAA,EAAAA,UAAS,IAArC,eAAOC,EAAP,KAAeC,EAAf,KACA,GAAkCF,EAAAA,EAAAA,WAAS,GAA3C,eAAOG,EAAP,KAAkBC,EAAlB,KACA,GAA0BJ,EAAAA,EAAAA,UAAS,MAAnC,eAAOK,EAAP,KAAcC,EAAd,KAsBA,OApBAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAW,mCAAG,oGAEhBJ,GAAa,GAFG,UAGaK,EAAAA,EAAAA,MAHb,OAGVC,EAHU,OAIhBR,EAAUQ,GAJM,gDAMhBJ,EAAS,KAAIK,SANG,yBAQhBP,GAAa,GARG,4EAAH,qDAWjBI,GACD,GAAE,KAEHD,EAAAA,EAAAA,YAAU,WACM,OAAVF,GACJO,EAAAA,OAAAA,QAAA,gCAAwCP,GACzC,GAAE,CAACA,KAGF,iCACE,SAACP,EAAD,gCACCK,IAAa,SAACU,EAAA,EAAD,KACd,SAAC,IAAD,CAAY7B,UAAWiB,MAG5B,C,yLCrCKa,E,QAAaC,EAAAA,OAAa,CAC9BC,QAAS,+BACTC,OAAQ,CACNC,QAAS,mCACTC,SAAU,WAIDV,EAAU,mCAAG,sGACDK,EAAWM,IAAI,uBADd,uBAChBC,EADgB,EAChBA,KADgB,kBAEjBA,EAAKC,SAFY,2CAAH,qDAKVC,EAAW,mCAAG,WAAMC,GAAN,yFACFV,EAAWM,IAAI,gBAAiB,CACrDH,OAAQ,CAAEO,MAAAA,KAFa,uBACjBH,EADiB,EACjBA,KADiB,kBAIlBA,EAAKC,SAJa,2CAAH,sDAOXG,EAAe,mCAAG,WAAMnC,GAAN,yFACNwB,EAAWM,IAAX,iBAAyB9B,IADnB,uBACrB+B,EADqB,EACrBA,KADqB,kBAEtBA,GAFsB,2CAAH,sDAKfK,EAAO,mCAAG,WAAMpC,GAAN,yFACEwB,EAAWM,IAAX,iBAAyB9B,EAAzB,aADF,uBACb+B,EADa,EACbA,KADa,kBAEdA,EAAKM,MAFS,2CAAH,sDAKPC,EAAU,mCAAG,WAAMtC,GAAN,yFACDwB,EAAWM,IAAX,iBAAyB9B,EAAzB,aADC,uBAChB+B,EADgB,EAChBA,KADgB,kBAEjBA,EAAKC,SAFY,2CAAH,qD","sources":["components/MoviesList/MoviesList.jsx","pages/HomePage/HomePage.styled.jsx","pages/HomePage/HomePage.jsx","services/Api.jsx"],"sourcesContent":["import { Link, useLocation } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nexport const MovieList = ({ movieList }) => {\n  const location = useLocation();\n  return (\n    <ul>\n      {Array.isArray(movieList) &&\n        movieList?.map(({ id, name, title }) => {\n          return (\n            <Link\n              style={{ textDecoration: 'none' }}\n              state={{ from: location }}\n              key={id}\n              to={`/movies/${id}`}\n            >\n              <h3>{name || title}</h3>\n            </Link>\n          );\n        })}\n    </ul>\n  );\n};\n\nMovieList.propTypes = {\n  movieList: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n      name: PropTypes.string,\n      title: PropTypes.string,\n    }).isRequired\n  ).isRequired,\n};","import styled from '@emotion/styled';\n\nexport const Title = styled.h2`\n  padding-left: 39px;\n`;","import { useState, useEffect } from 'react';\nimport { Notify } from 'notiflix';\nimport { Title } from './HomePage.styled';\nimport { Loader } from '../../components/Loader/Loader';\nimport { MovieList } from '../../components/MoviesList/MoviesList';\nimport { trendMovie } from '../../services/Api';\n\nfunction Home() {\n  const [trends, setTrends] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    const fetchTrends = async () => {\n      try {\n        setIsLoading(true);\n        const receivedTrends = await trendMovie();\n        setTrends(receivedTrends);\n      } catch (err) {\n        setError(err.message);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    fetchTrends();\n  }, []);\n\n  useEffect(() => {\n    if (error === null) return;\n    Notify.failure(`An error has occurred ${error}`);\n  }, [error]);\n\n  return (\n    <>\n      <Title>Trends of the day</Title>\n      {isLoading && <Loader />}\n      <MovieList  movieList={trends} />\n    </>\n  );\n}\n\nexport default Home;","import axios from 'axios';\n\nconst apiServise = axios.create({\n  baseURL: 'https://api.themoviedb.org/3',\n  params: {\n    api_key: '3181cdf2e58737cb479bdcab3d178467',\n    language: 'en-US',\n  },\n});\n\nexport const trendMovie = async () => {\n  const { data } = await apiServise.get('/trending/movie/day');\n  return data.results;\n};\n\nexport const searchMovie = async query => {\n  const { data } = await apiServise.get('/search/movie', {\n    params: { query },\n  });\n  return data.results;\n};\n\nexport const getMovieDetails = async id => {\n  const { data } = await apiServise.get(`/movie/${id}`);\n  return data;\n};\n\nexport const apiCast = async id => {\n  const { data } = await apiServise.get(`/movie/${id}/credits`);\n  return data.cast;\n};\n\nexport const apiReviews = async id => {\n  const { data } = await apiServise.get(`/movie/${id}/reviews`);\n  return data.results;\n};"],"names":["MovieList","movieList","location","useLocation","Array","isArray","map","id","name","title","style","textDecoration","state","from","to","Title","styled","useState","trends","setTrends","isLoading","setIsLoading","error","setError","useEffect","fetchTrends","trendMovie","receivedTrends","message","Notify","Loader","apiServise","axios","baseURL","params","api_key","language","get","data","results","searchMovie","query","getMovieDetails","apiCast","cast","apiReviews"],"sourceRoot":""}