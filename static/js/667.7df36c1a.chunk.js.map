{"version":3,"file":"static/js/667.7df36c1a.chunk.js","mappings":"wMAGaA,EAAY,SAAC,GAAmB,IAAjBC,EAAgB,EAAhBA,UACpBC,GAAWC,EAAAA,EAAAA,MACjB,OACE,wBACGC,MAAMC,QAAQJ,KAAd,OACCA,QADD,IACCA,OADD,EACCA,EAAWK,KAAI,YAA0B,IAAvBC,EAAsB,EAAtBA,GAAIC,EAAkB,EAAlBA,KAAMC,EAAY,EAAZA,MAC1B,OACE,SAAC,KAAD,CACEC,MAAO,CAAEC,eAAgB,QACzBC,MAAO,CAAEC,KAAMX,GAEfY,GAAE,kBAAaP,GAJjB,UAME,wBAAKC,GAAQC,KAHRF,EAMV,MAGR,C,wJC4CD,UAxDA,WACE,OAA4BQ,EAAAA,EAAAA,UAAS,IAArC,eAAOC,EAAP,KAAeC,EAAf,KACA,GAAkCF,EAAAA,EAAAA,WAAS,GAA3C,eAAOG,EAAP,KAAkBC,EAAlB,KACA,GAA0BJ,EAAAA,EAAAA,UAAS,MAAnC,eAAOK,EAAP,KAAcC,EAAd,KACA,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACMC,EAAQF,EAAaG,IAAI,SAqC/B,OAnCAC,EAAAA,EAAAA,YAAU,WACR,GAAI,OAACF,QAAD,IAACA,GAAAA,EAAOG,OAAZ,CAGA,IAAMC,EAAW,mCAAG,WAAMJ,GAAN,uFAEhBN,GAAa,GAFG,UAGaW,EAAAA,EAAAA,IAAYL,GAHzB,OAIc,KADxBM,EAHU,QAIGC,QACjBC,EAAAA,OAAAA,KAAA,yBAA8BR,IAEhCR,EAAUc,GAPM,gDAShBV,EAAS,KAAMa,SATC,yBAWhBf,GAAa,GAXG,4EAAH,sDAcjBU,EAAYJ,EAfX,CAgBF,GAAE,CAACA,KAEJE,EAAAA,EAAAA,YAAU,WACM,OAAVP,GACJa,EAAAA,OAAAA,QAAA,gCAAwCb,GACzC,GAAE,CAACA,KAYF,iCACE,kBAAMe,SAXW,SAAAC,GACnBA,EAAIC,iBACmC,KAAnCD,EAAIE,cAAcC,OAAOC,OAC3BP,EAAAA,OAAAA,QAAe,4BAEjBT,EAAgB,CAAEC,MAAOW,EAAIE,cAAcC,OAAOC,QAClDJ,EAAIK,OAAOC,OACZ,EAIG,WACE,kBAAOlC,KAAK,SAASmC,YAAY,eACjC,mBAAQC,KAAK,SAAb,UACE,SAAC,MAAD,SAGH1B,IAAa,SAAC,IAAD,KACd,SAAC,IAAD,CAAWjB,UAAWe,MAG3B,C,yLC9DK6B,E,QAAaC,EAAAA,OAAa,CAC9BC,QAAS,+BACTC,OAAQ,CACNC,QAAS,mCACTC,SAAU,WAIDC,EAAU,mCAAG,sGACDN,EAAWnB,IAAI,uBADd,uBAChB0B,EADgB,EAChBA,KADgB,kBAEjBA,EAAKC,SAFY,2CAAH,qDAKVvB,EAAW,mCAAG,WAAML,GAAN,yFACFoB,EAAWnB,IAAI,gBAAiB,CACrDsB,OAAQ,CAAEvB,MAAAA,KAFa,uBACjB2B,EADiB,EACjBA,KADiB,kBAIlBA,EAAKC,SAJa,2CAAH,sDAOXC,EAAe,mCAAG,WAAM/C,GAAN,yFACNsC,EAAWnB,IAAX,iBAAyBnB,IADnB,uBACrB6C,EADqB,EACrBA,KADqB,kBAEtBA,GAFsB,2CAAH,sDAKfG,EAAO,mCAAG,WAAMhD,GAAN,yFACEsC,EAAWnB,IAAX,iBAAyBnB,EAAzB,aADF,uBACb6C,EADa,EACbA,KADa,kBAEdA,EAAKI,MAFS,2CAAH,sDAKPC,EAAU,mCAAG,WAAMlD,GAAN,yFACDsC,EAAWnB,IAAX,iBAAyBnB,EAAzB,aADC,uBAChB6C,EADgB,EAChBA,KADgB,kBAEjBA,EAAKC,SAFY,2CAAH,qD","sources":["components/MoviesList/MoviesList.jsx","pages/MoviesPage/MoviesPage.jsx","services/Api.jsx"],"sourcesContent":["import { Link, useLocation } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nexport const MovieList = ({ movieList }) => {\n  const location = useLocation();\n  return (\n    <ul>\n      {Array.isArray(movieList) &&\n        movieList?.map(({ id, name, title }) => {\n          return (\n            <Link\n              style={{ textDecoration: 'none' }}\n              state={{ from: location }}\n              key={id}\n              to={`/movies/${id}`}\n            >\n              <h3>{name || title}</h3>\n            </Link>\n          );\n        })}\n    </ul>\n  );\n};\n\nMovieList.propTypes = {\n  movieList: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n      name: PropTypes.string,\n      title: PropTypes.string,\n    }).isRequired\n  ).isRequired,\n};","import { useEffect, useState } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport { ImSearch } from 'react-icons/im';\n\nimport { Notify } from 'notiflix';\n\nimport { MovieList } from '../../components/MoviesList/MoviesList';\nimport { Loader } from '../../components/Loader/Loader';\nimport { searchMovie } from '../../services/Api';\n\nfunction MoviesPage() {\n  const [movies, setMovies] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [searchParams, setSearchParams] = useSearchParams();\n  const query = searchParams.get('query');\n\n  useEffect(() => {\n    if (!query?.trim()) {\n      return;\n    }\n    const fetchTrends = async query => {\n      try {\n        setIsLoading(true);\n        const receivedMovies = await searchMovie(query);\n        if (receivedMovies.length === 0) {\n          Notify.info(`No results for ${query}`);\n        }\n        setMovies(receivedMovies);\n      } catch (error) {\n        setError(error.message);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    fetchTrends(query);\n  }, [query]);\n\n  useEffect(() => {\n    if (error === null) return;\n    Notify.failure(`An error has occurred ${error}`);\n  }, [error]);\n\n  const handleSubmit = evt => {\n    evt.preventDefault();\n    if (evt.currentTarget.search.value === '') {\n      Notify.warning('Fill in the input field!');\n    }\n    setSearchParams({ query: evt.currentTarget.search.value });\n    evt.target.reset();\n  };\n\n  return (\n    <>\n      <form onSubmit={handleSubmit}>\n        <input name=\"search\" placeholder=\"search...\" />\n        <button type=\"submit\">\n          <ImSearch />\n        </button>\n      </form>\n      {isLoading && <Loader />}\n      <MovieList movieList={movies} />\n    </>\n  );\n}\n\nexport default MoviesPage;","import axios from 'axios';\n\nconst apiServise = axios.create({\n  baseURL: 'https://api.themoviedb.org/3',\n  params: {\n    api_key: '3181cdf2e58737cb479bdcab3d178467',\n    language: 'en-US',\n  },\n});\n\nexport const trendMovie = async () => {\n  const { data } = await apiServise.get('/trending/movie/day');\n  return data.results;\n};\n\nexport const searchMovie = async query => {\n  const { data } = await apiServise.get('/search/movie', {\n    params: { query },\n  });\n  return data.results;\n};\n\nexport const getMovieDetails = async id => {\n  const { data } = await apiServise.get(`/movie/${id}`);\n  return data;\n};\n\nexport const apiCast = async id => {\n  const { data } = await apiServise.get(`/movie/${id}/credits`);\n  return data.cast;\n};\n\nexport const apiReviews = async id => {\n  const { data } = await apiServise.get(`/movie/${id}/reviews`);\n  return data.results;\n};"],"names":["MovieList","movieList","location","useLocation","Array","isArray","map","id","name","title","style","textDecoration","state","from","to","useState","movies","setMovies","isLoading","setIsLoading","error","setError","useSearchParams","searchParams","setSearchParams","query","get","useEffect","trim","fetchTrends","searchMovie","receivedMovies","length","Notify","message","onSubmit","evt","preventDefault","currentTarget","search","value","target","reset","placeholder","type","apiServise","axios","baseURL","params","api_key","language","trendMovie","data","results","getMovieDetails","apiCast","cast","apiReviews"],"sourceRoot":""}